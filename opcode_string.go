// Code generated by "stringer -type=Opcode,AddressKind"; DO NOT EDIT.

package dune

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[op_loadConstant-0]
	_ = x[op_move-1]
	_ = x[op_moveAndTest-2]
	_ = x[op_add-3]
	_ = x[op_subtract-4]
	_ = x[op_multiply-5]
	_ = x[op_divide-6]
	_ = x[op_modulo-7]
	_ = x[op_exponentiate-8]
	_ = x[op_binaryOr-9]
	_ = x[op_and-10]
	_ = x[op_xor-11]
	_ = x[op_leftShift-12]
	_ = x[op_rightShift-13]
	_ = x[op_inc-14]
	_ = x[op_dec-15]
	_ = x[op_not-16]
	_ = x[op_bitwiseNot-17]
	_ = x[op_setRegister-18]
	_ = x[op_newClass-19]
	_ = x[op_newClassSingleArg-20]
	_ = x[op_newArray-21]
	_ = x[op_newMap-22]
	_ = x[op_keys-23]
	_ = x[op_values-24]
	_ = x[op_length-25]
	_ = x[op_getEnumValue-26]
	_ = x[op_getIndexOrKey-27]
	_ = x[op_getOptChain-28]
	_ = x[op_setIndexOrKey-29]
	_ = x[op_spread-30]
	_ = x[op_jump-31]
	_ = x[op_jumpBack-32]
	_ = x[op_jumpIfEqual-33]
	_ = x[op_jumpIfNotEqual-34]
	_ = x[op_testJump-35]
	_ = x[op_equal-36]
	_ = x[op_notEqual-37]
	_ = x[op_strictEqual-38]
	_ = x[op_strictNotEqual-39]
	_ = x[op_less-40]
	_ = x[op_lessOrEqual-41]
	_ = x[op_call-42]
	_ = x[op_calOptChain-43]
	_ = x[op_callSingleArg-44]
	_ = x[op_calOptChainSingleArg-45]
	_ = x[op_readNativeField-46]
	_ = x[op_return-47]
	_ = x[op_createClosure-48]
	_ = x[op_throw-49]
	_ = x[op_try-50]
	_ = x[op_tryEnd-51]
	_ = x[op_catchEnd-52]
	_ = x[op_finallyEnd-53]
	_ = x[op_tryExit-54]
	_ = x[op_deleteField-55]
	_ = x[op_typeof-56]
}

const _Opcode_name = "op_loadConstantop_moveop_moveAndTestop_addop_subtractop_multiplyop_divideop_moduloop_exponentiateop_binaryOrop_andop_xorop_leftShiftop_rightShiftop_incop_decop_notop_bitwiseNotop_setRegisterop_newClassop_newClassSingleArgop_newArrayop_newMapop_keysop_valuesop_lengthop_getEnumValueop_getIndexOrKeyop_getOptChainop_setIndexOrKeyop_spreadop_jumpop_jumpBackop_jumpIfEqualop_jumpIfNotEqualop_testJumpop_equalop_notEqualop_strictEqualop_strictNotEqualop_lessop_lessOrEqualop_callop_calOptChainop_callSingleArgop_calOptChainSingleArgop_readNativeFieldop_returnop_createClosureop_throwop_tryop_tryEndop_catchEndop_finallyEndop_tryExitop_deleteFieldop_typeof"

var _Opcode_index = [...]uint16{0, 15, 22, 36, 42, 53, 64, 73, 82, 97, 108, 114, 120, 132, 145, 151, 157, 163, 176, 190, 201, 221, 232, 241, 248, 257, 266, 281, 297, 311, 327, 336, 343, 354, 368, 385, 396, 404, 415, 429, 446, 453, 467, 474, 488, 504, 527, 545, 554, 570, 578, 584, 593, 604, 617, 627, 641, 650}

func (i Opcode) String() string {
	if i >= Opcode(len(_Opcode_index)-1) {
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Opcode_name[_Opcode_index[i]:_Opcode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AddrVoid-0]
	_ = x[AddrLocal-1]
	_ = x[AddrGlobal-2]
	_ = x[AddrConstant-3]
	_ = x[AddrClosure-4]
	_ = x[AddrEnum-5]
	_ = x[AddrFunc-6]
	_ = x[AddrNativeFunc-7]
	_ = x[AddrClass-8]
	_ = x[AddrData-9]
	_ = x[AddrUnresolved-10]
}

const _AddressKind_name = "AddrVoidAddrLocalAddrGlobalAddrConstantAddrClosureAddrEnumAddrFuncAddrNativeFuncAddrClassAddrDataAddrUnresolved"

var _AddressKind_index = [...]uint8{0, 8, 17, 27, 39, 50, 58, 66, 80, 89, 97, 111}

func (i AddressKind) String() string {
	if i >= AddressKind(len(_AddressKind_index)-1) {
		return "AddressKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AddressKind_name[_AddressKind_index[i]:_AddressKind_index[i+1]]
}
